{"abi":[{"type":"function","name":"balanceOf","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"id","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"result","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"balanceOfBatch","inputs":[{"name":"owners","type":"address[]","internalType":"address[]"},{"name":"ids","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"balances","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"isApprovedForAll","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"result","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"safeBatchTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"ids","type":"uint256[]","internalType":"uint256[]"},{"name":"amounts","type":"uint256[]","internalType":"uint256[]"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"safeTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"id","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setApprovalForAll","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"isApproved","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"result","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"uri","inputs":[{"name":"id","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"event","name":"ApprovalForAll","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"isApproved","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"TransferBatch","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"ids","type":"uint256[]","indexed":false,"internalType":"uint256[]"},{"name":"amounts","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"TransferSingle","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"id","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"URI","inputs":[{"name":"value","type":"string","indexed":false,"internalType":"string"},{"name":"id","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"AccountBalanceOverflow","inputs":[]},{"type":"error","name":"ArrayLengthsMismatch","inputs":[]},{"type":"error","name":"InsufficientBalance","inputs":[]},{"type":"error","name":"NotOwnerNorApproved","inputs":[]},{"type":"error","name":"TransferToNonERC1155ReceiverImplementer","inputs":[]},{"type":"error","name":"TransferToZeroAddress","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","uri(uint256)":"0e89341c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC1155ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC1155.sol)Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC1155/ERC1155.sol)\",\"details\":\"Note: The ERC1155 standard allows for self-approvals. For performance, this implementation WILL NOT revert for such actions. Please add any checks with overrides if desired.\",\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"ArrayLengthsMismatch()\":[{\"details\":\"The lengths of the input arrays are not the same.\"}],\"InsufficientBalance()\":[{\"details\":\"Insufficient balance.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the tokens.\"}],\"TransferToNonERC1155ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC1155Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables `operator` to manage all of their tokens.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Emitted when `amounts` of token `ids` are transferred from `from` to `to` by `operator`.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `amount` of token `id` is transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the Uniform Resource Identifier (URI) for token `id` is updated to `value`. This event is not used in the base contract. You may need to emit this event depending on your URI logic. See: https://eips.ethereum.org/EIPS/eip-1155#metadata\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of `id` owned by `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReveived}, which is called upon a batch transfer. Emits a {TransferBatch} event.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Reveived}, which is called upon a batch transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas.\"},\"uri(uint256)\":{\"details\":\"Returns the URI for token `id`. You can either return the same templated URI for all token IDs, (e.g. \\\"https://example.com/api/{id}.json\\\"), or return a unique URI for each `id`. See: https://eips.ethereum.org/EIPS/eip-1155#metadata\"}},\"stateVariables\":{\"_APPROVAL_FOR_ALL_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\"},\"_ERC1155_MASTER_SLOT_SEED\":{\"details\":\"The `ownerSlotSeed` of a given owner is given by. ```     let ownerSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner)) ``` The balance slot of `owner` is given by. ```     mstore(0x20, ownerSlotSeed)     mstore(0x00, id)     let balanceSlot := keccak256(0x00, 0x40) ``` The operator approval slot of `owner` is given by. ```     mstore(0x20, ownerSlotSeed)     mstore(0x00, operator)     let operatorApprovalSlot := keccak256(0x0c, 0x34) ```\"},\"_TRANSFER_BATCH_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"TransferBatch(address,address,address,uint256[],uint256[])\\\"))`.\"},\"_TRANSFER_SINGLE_EVENT_SIGNATURE\":{\"details\":\"`keccak256(bytes(\\\"TransferSingle(address,address,address,uint256,uint256)\\\"))`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Simple ERC1155 implementation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/solady/src/tokens/ERC1155.sol\":\"ERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":150},\"remappings\":[\":@LayerZero-Protocol/=lib/LayerZero-v2/protocol/contracts/\",\":@LayerZero/=lib/LayerZero-v2/oapp/contracts/\",\":@LayerZeroTesting/=lib/LayerZero-v2/oapp/test/\",\":@axelar-network/=lib/LayerZero-v2/messagelib/node_modules/@axelar-network/\",\":@bloom-v2/=lib/bloom-v2/src/\",\":@chainlink/=lib/bloom-v2/lib/chainlink/contracts/src/v0.8/\",\":@layerzerolabs/=lib/LayerZero-v2/oapp/node_modules/@layerzerolabs/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@solady/=lib/bloom-v2/lib/solady/src/\",\":LayerZero-v2/=lib/LayerZero-v2/\",\":bloom-v2/=lib/bloom-v2/\",\":chainlink/=lib/bloom-v2/lib/chainlink/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=lib/LayerZero-v2/messagelib/node_modules/hardhat-deploy/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":solady/=lib/solady/src/\",\":solidity-bytes-utils/=lib/LayerZero-v2/oapp/node_modules/solidity-bytes-utils/\",\":solmate/=lib/solmate/src/\"],\"viaIR\":true},\"sources\":{\"lib/solady/src/tokens/ERC1155.sol\":{\"keccak256\":\"0x6101685d0c266baeddf375e2338a63c8bd25c1f455a1cd8dbdea91c85f6f28a2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9d46ff274f6689abb62a32da8bdb7f1551b2677ca57df63a5fe37aeabce255ee\",\"dweb:/ipfs/QmaE8UX8qYmcNNNkjjE5JzkYtUPNbKjCdQYx1HiRNYzaUo\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"AccountBalanceOverflow"},{"inputs":[],"type":"error","name":"ArrayLengthsMismatch"},{"inputs":[],"type":"error","name":"InsufficientBalance"},{"inputs":[],"type":"error","name":"NotOwnerNorApproved"},{"inputs":[],"type":"error","name":"TransferToNonERC1155ReceiverImplementer"},{"inputs":[],"type":"error","name":"TransferToZeroAddress"},{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"bool","name":"isApproved","type":"bool","indexed":false}],"type":"event","name":"ApprovalForAll","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256[]","name":"ids","type":"uint256[]","indexed":false},{"internalType":"uint256[]","name":"amounts","type":"uint256[]","indexed":false}],"type":"event","name":"TransferBatch","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"id","type":"uint256","indexed":false},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"TransferSingle","anonymous":false},{"inputs":[{"internalType":"string","name":"value","type":"string","indexed":false},{"internalType":"uint256","name":"id","type":"uint256","indexed":true}],"type":"event","name":"URI","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}]},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"stateMutability":"view","type":"function","name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"result","type":"bool"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"safeBatchTransferFrom"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"safeTransferFrom"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setApprovalForAll"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"result","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"stateMutability":"view","type":"function","name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}]}],"devdoc":{"kind":"dev","methods":{"balanceOf(address,uint256)":{"details":"Returns the amount of `id` owned by `owner`."},"balanceOfBatch(address[],uint256[])":{"details":"Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length."},"isApprovedForAll(address,address)":{"details":"Returns whether `operator` is approved to manage the tokens of `owner`."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReveived}, which is called upon a batch transfer. Emits a {TransferBatch} event."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Reveived}, which is called upon a batch transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas."},"uri(uint256)":{"details":"Returns the URI for token `id`. You can either return the same templated URI for all token IDs, (e.g. \"https://example.com/api/{id}.json\"), or return a unique URI for each `id`. See: https://eips.ethereum.org/EIPS/eip-1155#metadata"}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@LayerZero-Protocol/=lib/LayerZero-v2/protocol/contracts/","@LayerZero/=lib/LayerZero-v2/oapp/contracts/","@LayerZeroTesting/=lib/LayerZero-v2/oapp/test/","@axelar-network/=lib/LayerZero-v2/messagelib/node_modules/@axelar-network/","@bloom-v2/=lib/bloom-v2/src/","@chainlink/=lib/bloom-v2/lib/chainlink/contracts/src/v0.8/","@layerzerolabs/=lib/LayerZero-v2/oapp/node_modules/@layerzerolabs/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@solady/=lib/bloom-v2/lib/solady/src/","LayerZero-v2/=lib/LayerZero-v2/","bloom-v2/=lib/bloom-v2/","chainlink/=lib/bloom-v2/lib/chainlink/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","hardhat-deploy/=lib/LayerZero-v2/messagelib/node_modules/hardhat-deploy/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","solady/=lib/solady/src/","solidity-bytes-utils/=lib/LayerZero-v2/oapp/node_modules/solidity-bytes-utils/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":150},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/solady/src/tokens/ERC1155.sol":"ERC1155"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"lib/solady/src/tokens/ERC1155.sol":{"keccak256":"0x6101685d0c266baeddf375e2338a63c8bd25c1f455a1cd8dbdea91c85f6f28a2","urls":["bzz-raw://9d46ff274f6689abb62a32da8bdb7f1551b2677ca57df63a5fe37aeabce255ee","dweb:/ipfs/QmaE8UX8qYmcNNNkjjE5JzkYtUPNbKjCdQYx1HiRNYzaUo"],"license":"MIT"}},"version":1},"id":68}