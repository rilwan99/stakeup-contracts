{
    "files": [
        "certora/harness/RedemptionNFTHarness.sol",
        "certora/harness/RewardManagerHarness.sol",
        "certora/harness/StakeUpStakingHarness.sol",
        "certora/harness/StakeUpTokenHarness.sol",
        "certora/harness/StTBYHarness.sol",
        "certora/harness/WstTBYHarness.sol",
        "certora/helpers/StableTokenMockERC20.sol",
        "certora/helpers/BillyTokenMockERC20.sol",
        "certora/helpers/MockBloomPoolA.sol",
        "certora/helpers/MockBloomPoolB.sol",
        "certora/helpers/MockEmergencyHandler.sol",
        "tests/mocks/MockSwapFacility.sol",
        "tests/mocks/MockBloomFactory.sol",
        "tests/mocks/MockRegistry.sol"
    ],
    "packages": [
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts",
        "@layerzerolabs/=lib/solidity-examples/contracts",
        "solady/=lib/solady/src"
    ],
    "link": [
        "RedemptionNFTHarness:_stTBY=StTBYHarness",

        "RewardManagerHarness:_stTBY=StTBYHarness",
        "RewardManagerHarness:_stakeupToken=StakeUpTokenHarness",
        "RewardManagerHarness:_stakeupStaking=StakeUpStakingHarness",

        "StakeUpStakingHarness:_stTBY=StTBYHarness",
        "StakeUpStakingHarness:_rewardManager=RewardManagerHarness",
        "StakeUpStakingHarness:_stakeupToken=StakeUpTokenHarness",

        "StakeUpTokenHarness:_stakeupStaking=StakeUpStakingHarness",
        "StakeUpTokenHarness:_rewardManager=RewardManagerHarness",

        "WstTBYHarness:_stTBY=StTBYHarness",

        "StTBYHarness:_underlyingToken=StableTokenMockERC20",
        "StTBYHarness:_bloomFactory=MockBloomFactory",
        "StTBYHarness:_registry=MockRegistry",
        "StTBYHarness:_stakeupStaking=StakeUpStakingHarness",
        "StTBYHarness:_rewardManager=RewardManagerHarness",
        "StTBYHarness:_wstTBY=WstTBYHarness",
        "StTBYHarness:_redemptionNFT=RedemptionNFTHarness",

        "MockSwapFacility:token0=StableTokenMockERC20",
        "MockSwapFacility:token1=BillyTokenMockERC20",

        "MockBloomPoolA:underlyingToken=StableTokenMockERC20",
        "MockBloomPoolA:billToken=BillyTokenMockERC20",
        "MockBloomPoolA:swap=MockSwapFacility",
        "MockBloomPoolA:_emergencyHandler=MockEmergencyHandler",

        "MockBloomFactory:_pool=MockBloomPoolA",

        "MockRegistry:pool=MockBloomPoolA",
    ],
    "loop_iter": "2",
    "optimistic_loop": true,
    "rule_sanity": "basic",
    "verify": "StTBYHarness:certora/specs/StTBY.spec",
    "parametric_contracts": [ "StTBYHarness" ]
}
